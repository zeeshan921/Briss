
  
{%- liquid 
  assign horizontal_position = section.settings.horizontal_position
  assign horizontal_dst_to_edge = section.settings.horizontal_dst_to_edge
  assign horizontal_dst_to_edge_mobile = section.settings.horizontal_dst_to_edge_mobile
  assign vertical_dst_to_edge = section.settings.vertical_dst_to_edge
  assign vertical_dst_to_edge_mobile = section.settings.vertical_dst_to_edge_mobile

  assign circle_size = section.settings.circle_size
  assign circle_size_mobile = section.settings.circle_size_mobile
  assign progress_thickness = section.settings.progress_thickness

  assign circle_bg_color = section.settings.circle_bg_color
  assign circle_bg_hover_color = section.settings.circle_bg_hover_color

  assign progress_color = section.settings.progress_color
  assign progress_active_color = section.settings.progress_active_color

  assign arrow_color = section.settings.arrow_color
  assign arrow_hover_color = section.settings.arrow_hover_color
-%}

{%- style -%}  
  .top-{{ section.id }} {
    position: fixed;
    z-index: 2;
    bottom: {{ vertical_dst_to_edge_mobile }}px;
    opacity: 0;
    transition: all 0.5s ease 0s;
  }

  .top-circle-{{ section.id }} {
    position: relative;
    width: {{ circle_size_mobile }}px;
    height: {{ circle_size_mobile }}px;
    border-radius: 100%;
    cursor: pointer;
  }

  .top-circle-{{ section.id }}::after {
    position: absolute;
    content: "";
    text-align: center;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    background: {{ circle_bg_color }};
    border: {{ progress_thickness }}px solid {{ progress_color }};
  }

  .top-{{ section.id }}:hover .top-circle-{{ section.id }}::after {
    background: {{ circle_bg_hover_color }};
  }

  .top-progress-circle-{{ section.id }} {
    width: 100%;
    height: 100%;
    overflow: visible;
  }

  .top-progress-circle-{{ section.id }} path {
    stroke: {{ progress_active_color }};
    stroke-width: {{ progress_thickness }};
    box-sizing: border-box;
    fill: none;
  }

  .top-arrow-{{ section.id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 2;
    width: {{ circle_size_mobile | times: 0.35 }}px;
    height: {{ circle_size_mobile | times: 0.35 }}px;
  }

  .top-arrow-{{ section.id }} path {
    stroke: {{ arrow_color }}
  }

  .top-{{ section.id }}:hover .top-arrow-{{ section.id }} path {
    stroke: {{ arrow_hover_color }};
  }

  @media(min-width: 1024px) {
    .top-{{ section.id }} {
      bottom: {{ vertical_dst_to_edge }}px;
    }

    .top-circle-{{ section.id }} {
      width: {{ circle_size }}px;
      height: {{ circle_size }}px;
    }

    .top-arrow-{{ section.id }} {
      width: {{ circle_size | times: 0.35 }}px;
      height: {{ circle_size | times: 0.35 }}px;
    }
  }
{%- endstyle -%}  

{% if horizontal_position == "left" %}
  <style>
    .top-{{ section.id }} {
      left: {{ horizontal_dst_to_edge_mobile }}px;
    }
    
    @media(min-width: 1024px) {
      .top-{{ section.id }} {          
        left: {{ horizontal_dst_to_edge }}px;
        right: unset;
      }
    }
  </style>
{% elsif horizontal_position == "right" %}
  <style>
    .top-{{ section.id }} {
      right: {{ horizontal_dst_to_edge_mobile }}px;
    }
    
    @media(min-width: 1024px) {
      .top-{{ section.id }} {
        right: {{ horizontal_dst_to_edge }}px;
        left: unset;
      }
    }
  </style>
{% elsif horizontal_position == "center" %}
  <style>
    .top-{{ section.id }} {
      left: 50%;
      transform: translateX(-50%);
    }
    
    @media(min-width: 1024px) {
      .top-{{ section.id }} {
        left: 50%;
        transform: translateX(-50%);
        right: unset;
      }
    }
  </style>
{% endif %}

<div class="top-{{ section.id }}">
  <div class="top-circle-{{ section.id }}">
    <svg class="top-progress-circle-{{ section.id }}" width="100%" height="100%" viewBox="-1 -1 102 102">
      <path
        class="progress-path-{{ section.id }}"
        d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98"
        style="stroke-dasharray: 307.919; stroke-dashoffset: 307.919; transition: stroke-dashoffset 10ms linear;">
      </path>
    </svg>
    <svg class="top-arrow-{{ section.id }}" width="15px" height="15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="none">
      <path stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 18V2m0 0l7 7m-7-7L3 9" />
    </svg>
  </div>
</div>

<script>
  function initBackToTop2() {
    const topElement = document.querySelector('.top-{{ section.id }}');
    const progressPath = document.querySelector('.progress-path-{{ section.id }}');
    const totalScrollHeight = document.documentElement.scrollHeight - window.innerHeight;
    const startOpacityScroll = 50;

    const pathLength = progressPath.getTotalLength();
    progressPath.style.strokeDasharray = pathLength; 
    progressPath.style.strokeDashoffset = pathLength;

    function handleScroll() {
      const scrollTop = window.scrollY;

      if (scrollTop > startOpacityScroll) {
        topElement.style.opacity = 1;
        topElement.style.pointerEvents = 'all';
      } else {
        topElement.style.opacity = 0;
        topElement.style.pointerEvents = 'none';
      }

      const progress = Math.min(scrollTop / totalScrollHeight, 1);
      let dashoffset = pathLength * (1 - progress);

      if (scrollTop === totalScrollHeight) {
        dashoffset = 0;
      }

      progressPath.style.strokeDashoffset = dashoffset;
    }

    window.addEventListener('scroll', handleScroll);
    topElement.addEventListener('click', () => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initBackToTop2);

  if (Shopify.designMode) {
    document.addEventListener('shopify:section:unload', initBackToTop2);
    document.addEventListener('shopify:section:load', initBackToTop2);
  }
</script>


{% schema %}
  {
    "name": "Back to top",
    "settings": [
      {
        "type": "paragraph",
        "content": "⚠️ Save settings to view updates"
      },
      {
        "type": "header",
        "content": "Position settings"
      },
      {
        "type": "select",
        "id": "horizontal_position",
        "label": "Horizontal position",
        "default": "right",
        "options": [          
          {
            "value": "left",
            "label": "Left"
          },
          {
            "value": "center", 
            "label": "Center"
          },
          {
            "value": "right",
            "label": "Right"
          }
        ]       
      },
      {
        "type": "range",
        "id": "horizontal_dst_to_edge",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Horizontal edge distance",
        "default": 30
      },
      {
        "type": "range",
        "id": "horizontal_dst_to_edge_mobile",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Horizontal edge distance - mobile",
        "default": 20
      },
      {
        "type": "range",
        "id": "vertical_dst_to_edge",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Vertical edge distance",
        "default": 50
      },
      {
        "type": "range",
        "id": "vertical_dst_to_edge_mobile",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Vertical edge distance - mobile",
        "default": 50
      },
      {
        "type": "header",
        "content": "Circle settings"
      }, 
      {
        "type": "range",
        "id": "circle_size",
        "min": 20,
        "max": 100,
        "step": 2,
        "unit": "px",
        "label": "Size",
        "default": 46
      },
      {
        "type": "range",
        "id": "circle_size_mobile",
        "min": 20,
        "max": 100,
        "step": 2,
        "unit": "px",
        "label": "Size - mobile",
        "default": 46
      },
      {
        "type": "range",
        "id": "progress_thickness",
        "min": 1,
        "max": 10,
        "step": 1,
        "unit": "px",
        "label": "Progress thickness",
        "default": 4
      },
      {
        "type": "header",
        "content": "Circle colors"
      },    
      {
        "type": "color",
        "label": "Background",
        "id": "circle_bg_color",
        "default": "#FFFFFF"
      },  
      {
        "type": "color",
        "label": "Background hover",
        "id": "circle_bg_hover_color",
        "default": "#cbbeb0"
      }, 
      {
        "type": "header",
        "content": "Progress colors"
      }, 
      {
        "type": "color",
        "label": "Default",
        "id": "progress_color",
        "default": "#F5F5F5"
      },  
      {
        "type": "color",
        "label": "Active",
        "id": "progress_active_color",
        "default": "#000000"
      },  
      {
        "type": "header",
        "content": "Arrow colors"
      }, 
      {
        "type": "color",
        "label": "Arrow",
        "id": "arrow_color",
        "default": "#000000"
      },  
      {
        "type": "color",
        "label": "Arrow hover",
        "id": "arrow_hover_color",
        "default": "#FFFFFF"
      } 
    ],
    "presets": [
      {
        "name": "Back to top"
      }
    ]
  }
{% endschema %}

